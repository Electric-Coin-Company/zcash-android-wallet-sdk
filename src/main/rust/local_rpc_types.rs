// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `local_rpc_types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionDataList {
    // message fields
    pub data: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionDataList {
    fn default() -> &'a TransactionDataList {
        <TransactionDataList as ::protobuf::Message>::default_instance()
    }
}

impl TransactionDataList {
    pub fn new() -> TransactionDataList {
        ::std::default::Default::default()
    }

    // repeated bytes data = 1;


    pub fn get_data(&self) -> &[::std::vec::Vec<u8>] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionDataList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.data {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.data {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionDataList {
        TransactionDataList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &TransactionDataList| { &m.data },
                |m: &mut TransactionDataList| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionDataList>(
                "TransactionDataList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionDataList {
        static instance: ::protobuf::rt::LazyV2<TransactionDataList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionDataList::new)
    }
}

impl ::protobuf::Clear for TransactionDataList {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionDataList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionDataList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransparentTransactionList {
    // message fields
    pub transactions: ::protobuf::RepeatedField<TransparentTransaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransparentTransactionList {
    fn default() -> &'a TransparentTransactionList {
        <TransparentTransactionList as ::protobuf::Message>::default_instance()
    }
}

impl TransparentTransactionList {
    pub fn new() -> TransparentTransactionList {
        ::std::default::Default::default()
    }

    // repeated .cash.z.ecc.android.sdk.rpc.TransparentTransaction transactions = 1;


    pub fn get_transactions(&self) -> &[TransparentTransaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<TransparentTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<TransparentTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<TransparentTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransparentTransactionList {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransparentTransactionList {
        TransparentTransactionList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransparentTransaction>>(
                "transactions",
                |m: &TransparentTransactionList| { &m.transactions },
                |m: &mut TransparentTransactionList| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransparentTransactionList>(
                "TransparentTransactionList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransparentTransactionList {
        static instance: ::protobuf::rt::LazyV2<TransparentTransactionList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransparentTransactionList::new)
    }
}

impl ::protobuf::Clear for TransparentTransactionList {
    fn clear(&mut self) {
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransparentTransactionList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransparentTransactionList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransparentTransaction {
    // message fields
    pub protoVersion: u32,
    pub expiryHeight: u32,
    pub hasShieldedOutputs: bool,
    pub hasShieldedSpends: bool,
    pub height: u32,
    pub value: i64,
    pub toAddress: ::std::string::String,
    pub fromAddress: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransparentTransaction {
    fn default() -> &'a TransparentTransaction {
        <TransparentTransaction as ::protobuf::Message>::default_instance()
    }
}

impl TransparentTransaction {
    pub fn new() -> TransparentTransaction {
        ::std::default::Default::default()
    }

    // uint32 protoVersion = 1;


    pub fn get_protoVersion(&self) -> u32 {
        self.protoVersion
    }
    pub fn clear_protoVersion(&mut self) {
        self.protoVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_protoVersion(&mut self, v: u32) {
        self.protoVersion = v;
    }

    // uint32 expiryHeight = 2;


    pub fn get_expiryHeight(&self) -> u32 {
        self.expiryHeight
    }
    pub fn clear_expiryHeight(&mut self) {
        self.expiryHeight = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiryHeight(&mut self, v: u32) {
        self.expiryHeight = v;
    }

    // bool hasShieldedOutputs = 3;


    pub fn get_hasShieldedOutputs(&self) -> bool {
        self.hasShieldedOutputs
    }
    pub fn clear_hasShieldedOutputs(&mut self) {
        self.hasShieldedOutputs = false;
    }

    // Param is passed by value, moved
    pub fn set_hasShieldedOutputs(&mut self, v: bool) {
        self.hasShieldedOutputs = v;
    }

    // bool hasShieldedSpends = 4;


    pub fn get_hasShieldedSpends(&self) -> bool {
        self.hasShieldedSpends
    }
    pub fn clear_hasShieldedSpends(&mut self) {
        self.hasShieldedSpends = false;
    }

    // Param is passed by value, moved
    pub fn set_hasShieldedSpends(&mut self, v: bool) {
        self.hasShieldedSpends = v;
    }

    // uint32 height = 5;


    pub fn get_height(&self) -> u32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = v;
    }

    // int64 value = 6;


    pub fn get_value(&self) -> i64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i64) {
        self.value = v;
    }

    // string toAddress = 7;


    pub fn get_toAddress(&self) -> &str {
        &self.toAddress
    }
    pub fn clear_toAddress(&mut self) {
        self.toAddress.clear();
    }

    // Param is passed by value, moved
    pub fn set_toAddress(&mut self, v: ::std::string::String) {
        self.toAddress = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_toAddress(&mut self) -> &mut ::std::string::String {
        &mut self.toAddress
    }

    // Take field
    pub fn take_toAddress(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.toAddress, ::std::string::String::new())
    }

    // string fromAddress = 8;


    pub fn get_fromAddress(&self) -> &str {
        &self.fromAddress
    }
    pub fn clear_fromAddress(&mut self) {
        self.fromAddress.clear();
    }

    // Param is passed by value, moved
    pub fn set_fromAddress(&mut self, v: ::std::string::String) {
        self.fromAddress = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fromAddress(&mut self) -> &mut ::std::string::String {
        &mut self.fromAddress
    }

    // Take field
    pub fn take_fromAddress(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fromAddress, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TransparentTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.protoVersion = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.expiryHeight = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hasShieldedOutputs = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hasShieldedSpends = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.height = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.toAddress)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fromAddress)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.protoVersion != 0 {
            my_size += ::protobuf::rt::value_size(1, self.protoVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expiryHeight != 0 {
            my_size += ::protobuf::rt::value_size(2, self.expiryHeight, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hasShieldedOutputs != false {
            my_size += 2;
        }
        if self.hasShieldedSpends != false {
            my_size += 2;
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(5, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(6, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.toAddress.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.toAddress);
        }
        if !self.fromAddress.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.fromAddress);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.protoVersion != 0 {
            os.write_uint32(1, self.protoVersion)?;
        }
        if self.expiryHeight != 0 {
            os.write_uint32(2, self.expiryHeight)?;
        }
        if self.hasShieldedOutputs != false {
            os.write_bool(3, self.hasShieldedOutputs)?;
        }
        if self.hasShieldedSpends != false {
            os.write_bool(4, self.hasShieldedSpends)?;
        }
        if self.height != 0 {
            os.write_uint32(5, self.height)?;
        }
        if self.value != 0 {
            os.write_int64(6, self.value)?;
        }
        if !self.toAddress.is_empty() {
            os.write_string(7, &self.toAddress)?;
        }
        if !self.fromAddress.is_empty() {
            os.write_string(8, &self.fromAddress)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransparentTransaction {
        TransparentTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "protoVersion",
                |m: &TransparentTransaction| { &m.protoVersion },
                |m: &mut TransparentTransaction| { &mut m.protoVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "expiryHeight",
                |m: &TransparentTransaction| { &m.expiryHeight },
                |m: &mut TransparentTransaction| { &mut m.expiryHeight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hasShieldedOutputs",
                |m: &TransparentTransaction| { &m.hasShieldedOutputs },
                |m: &mut TransparentTransaction| { &mut m.hasShieldedOutputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hasShieldedSpends",
                |m: &TransparentTransaction| { &m.hasShieldedSpends },
                |m: &mut TransparentTransaction| { &mut m.hasShieldedSpends },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "height",
                |m: &TransparentTransaction| { &m.height },
                |m: &mut TransparentTransaction| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "value",
                |m: &TransparentTransaction| { &m.value },
                |m: &mut TransparentTransaction| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "toAddress",
                |m: &TransparentTransaction| { &m.toAddress },
                |m: &mut TransparentTransaction| { &mut m.toAddress },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fromAddress",
                |m: &TransparentTransaction| { &m.fromAddress },
                |m: &mut TransparentTransaction| { &mut m.fromAddress },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransparentTransaction>(
                "TransparentTransaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransparentTransaction {
        static instance: ::protobuf::rt::LazyV2<TransparentTransaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransparentTransaction::new)
    }
}

impl ::protobuf::Clear for TransparentTransaction {
    fn clear(&mut self) {
        self.protoVersion = 0;
        self.expiryHeight = 0;
        self.hasShieldedOutputs = false;
        self.hasShieldedSpends = false;
        self.height = 0;
        self.value = 0;
        self.toAddress.clear();
        self.fromAddress.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransparentTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransparentTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15local_rpc_types.proto\x12\x1acash.z.ecc.android.sdk.rpc\"-\n\x13Tr\
    ansactionDataList\x12\x14\n\x04data\x18\x01\x20\x03(\x0cR\x04dataB\0:\0\
    \"x\n\x1aTransparentTransactionList\x12X\n\x0ctransactions\x18\x01\x20\
    \x03(\x0b22.cash.z.ecc.android.sdk.rpc.TransparentTransactionR\x0ctransa\
    ctionsB\0:\0\"\xbe\x02\n\x16TransparentTransaction\x12$\n\x0cprotoVersio\
    n\x18\x01\x20\x01(\rR\x0cprotoVersionB\0\x12$\n\x0cexpiryHeight\x18\x02\
    \x20\x01(\rR\x0cexpiryHeightB\0\x120\n\x12hasShieldedOutputs\x18\x03\x20\
    \x01(\x08R\x12hasShieldedOutputsB\0\x12.\n\x11hasShieldedSpends\x18\x04\
    \x20\x01(\x08R\x11hasShieldedSpendsB\0\x12\x18\n\x06height\x18\x05\x20\
    \x01(\rR\x06heightB\0\x12\x16\n\x05value\x18\x06\x20\x01(\x03R\x05valueB\
    \0\x12\x1e\n\ttoAddress\x18\x07\x20\x01(\tR\ttoAddressB\0\x12\"\n\x0bfro\
    mAddress\x18\x08\x20\x01(\tR\x0bfromAddressB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
