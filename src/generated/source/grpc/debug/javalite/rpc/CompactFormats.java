// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compact_formats.proto

package rpc;

public final class CompactFormats {
  private CompactFormats() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface CompactBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rpc.CompactBlock)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>optional uint32 protoVersion = 1;</code>
     */
    int getProtoVersion();

    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>optional uint64 height = 2;</code>
     */
    long getHeight();

    /**
     * <code>optional bytes hash = 3;</code>
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <code>optional uint32 time = 4;</code>
     */
    int getTime();

    /**
     * <pre>
     * (hash and time) OR (full header)
     * </pre>
     *
     * <code>optional bytes header = 5;</code>
     */
    com.google.protobuf.ByteString getHeader();

    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    java.util.List<rpc.CompactFormats.CompactTx> 
        getVtxList();
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    rpc.CompactFormats.CompactTx getVtx(int index);
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    int getVtxCount();
  }
  /**
   * <pre>
   * CompactBlock is a packaging of ONLY the data from a block that's needed to:
   *   1. Detect a payment to your shielded Sapling address
   *   2. Detect a spend of your shielded Sapling notes
   *   3. Update your witnesses to generate new Sapling spend proofs.
   * </pre>
   *
   * Protobuf type {@code rpc.CompactBlock}
   */
  public  static final class CompactBlock extends
      com.google.protobuf.GeneratedMessageLite<
          CompactBlock, CompactBlock.Builder> implements
      // @@protoc_insertion_point(message_implements:rpc.CompactBlock)
      CompactBlockOrBuilder {
    private CompactBlock() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
      header_ = com.google.protobuf.ByteString.EMPTY;
      vtx_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int PROTOVERSION_FIELD_NUMBER = 1;
    private int protoVersion_;
    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>optional uint32 protoVersion = 1;</code>
     */
    public int getProtoVersion() {
      return protoVersion_;
    }
    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>optional uint32 protoVersion = 1;</code>
     */
    private void setProtoVersion(int value) {
      
      protoVersion_ = value;
    }
    /**
     * <pre>
     * the version of this wire format, for storage
     * </pre>
     *
     * <code>optional uint32 protoVersion = 1;</code>
     */
    private void clearProtoVersion() {
      
      protoVersion_ = 0;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private long height_;
    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>optional uint64 height = 2;</code>
     */
    public long getHeight() {
      return height_;
    }
    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>optional uint64 height = 2;</code>
     */
    private void setHeight(long value) {
      
      height_ = value;
    }
    /**
     * <pre>
     * the height of this block
     * </pre>
     *
     * <code>optional uint64 height = 2;</code>
     */
    private void clearHeight() {
      
      height_ = 0L;
    }

    public static final int HASH_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString hash_;
    /**
     * <code>optional bytes hash = 3;</code>
     */
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }
    /**
     * <code>optional bytes hash = 3;</code>
     */
    private void setHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hash_ = value;
    }
    /**
     * <code>optional bytes hash = 3;</code>
     */
    private void clearHash() {
      
      hash_ = getDefaultInstance().getHash();
    }

    public static final int TIME_FIELD_NUMBER = 4;
    private int time_;
    /**
     * <code>optional uint32 time = 4;</code>
     */
    public int getTime() {
      return time_;
    }
    /**
     * <code>optional uint32 time = 4;</code>
     */
    private void setTime(int value) {
      
      time_ = value;
    }
    /**
     * <code>optional uint32 time = 4;</code>
     */
    private void clearTime() {
      
      time_ = 0;
    }

    public static final int HEADER_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString header_;
    /**
     * <pre>
     * (hash and time) OR (full header)
     * </pre>
     *
     * <code>optional bytes header = 5;</code>
     */
    public com.google.protobuf.ByteString getHeader() {
      return header_;
    }
    /**
     * <pre>
     * (hash and time) OR (full header)
     * </pre>
     *
     * <code>optional bytes header = 5;</code>
     */
    private void setHeader(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      header_ = value;
    }
    /**
     * <pre>
     * (hash and time) OR (full header)
     * </pre>
     *
     * <code>optional bytes header = 5;</code>
     */
    private void clearHeader() {
      
      header_ = getDefaultInstance().getHeader();
    }

    public static final int VTX_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<rpc.CompactFormats.CompactTx> vtx_;
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    public java.util.List<rpc.CompactFormats.CompactTx> getVtxList() {
      return vtx_;
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    public java.util.List<? extends rpc.CompactFormats.CompactTxOrBuilder> 
        getVtxOrBuilderList() {
      return vtx_;
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    public int getVtxCount() {
      return vtx_.size();
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    public rpc.CompactFormats.CompactTx getVtx(int index) {
      return vtx_.get(index);
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    public rpc.CompactFormats.CompactTxOrBuilder getVtxOrBuilder(
        int index) {
      return vtx_.get(index);
    }
    private void ensureVtxIsMutable() {
      if (!vtx_.isModifiable()) {
        vtx_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(vtx_);
       }
    }

    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void setVtx(
        int index, rpc.CompactFormats.CompactTx value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureVtxIsMutable();
      vtx_.set(index, value);
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void setVtx(
        int index, rpc.CompactFormats.CompactTx.Builder builderForValue) {
      ensureVtxIsMutable();
      vtx_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void addVtx(rpc.CompactFormats.CompactTx value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureVtxIsMutable();
      vtx_.add(value);
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void addVtx(
        int index, rpc.CompactFormats.CompactTx value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureVtxIsMutable();
      vtx_.add(index, value);
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void addVtx(
        rpc.CompactFormats.CompactTx.Builder builderForValue) {
      ensureVtxIsMutable();
      vtx_.add(builderForValue.build());
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void addVtx(
        int index, rpc.CompactFormats.CompactTx.Builder builderForValue) {
      ensureVtxIsMutable();
      vtx_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void addAllVtx(
        java.lang.Iterable<? extends rpc.CompactFormats.CompactTx> values) {
      ensureVtxIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, vtx_);
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void clearVtx() {
      vtx_ = emptyProtobufList();
    }
    /**
     * <pre>
     * compact transactions from this block
     * </pre>
     *
     * <code>repeated .rpc.CompactTx vtx = 6;</code>
     */
    private void removeVtx(int index) {
      ensureVtxIsMutable();
      vtx_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (protoVersion_ != 0) {
        output.writeUInt32(1, protoVersion_);
      }
      if (height_ != 0L) {
        output.writeUInt64(2, height_);
      }
      if (!hash_.isEmpty()) {
        output.writeBytes(3, hash_);
      }
      if (time_ != 0) {
        output.writeUInt32(4, time_);
      }
      if (!header_.isEmpty()) {
        output.writeBytes(5, header_);
      }
      for (int i = 0; i < vtx_.size(); i++) {
        output.writeMessage(6, vtx_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (protoVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, protoVersion_);
      }
      if (height_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, height_);
      }
      if (!hash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, hash_);
      }
      if (time_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, time_);
      }
      if (!header_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, header_);
      }
      for (int i = 0; i < vtx_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, vtx_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactBlock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactBlock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rpc.CompactFormats.CompactBlock prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * CompactBlock is a packaging of ONLY the data from a block that's needed to:
     *   1. Detect a payment to your shielded Sapling address
     *   2. Detect a spend of your shielded Sapling notes
     *   3. Update your witnesses to generate new Sapling spend proofs.
     * </pre>
     *
     * Protobuf type {@code rpc.CompactBlock}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          rpc.CompactFormats.CompactBlock, Builder> implements
        // @@protoc_insertion_point(builder_implements:rpc.CompactBlock)
        rpc.CompactFormats.CompactBlockOrBuilder {
      // Construct using rpc.CompactFormats.CompactBlock.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * the version of this wire format, for storage
       * </pre>
       *
       * <code>optional uint32 protoVersion = 1;</code>
       */
      public int getProtoVersion() {
        return instance.getProtoVersion();
      }
      /**
       * <pre>
       * the version of this wire format, for storage
       * </pre>
       *
       * <code>optional uint32 protoVersion = 1;</code>
       */
      public Builder setProtoVersion(int value) {
        copyOnWrite();
        instance.setProtoVersion(value);
        return this;
      }
      /**
       * <pre>
       * the version of this wire format, for storage
       * </pre>
       *
       * <code>optional uint32 protoVersion = 1;</code>
       */
      public Builder clearProtoVersion() {
        copyOnWrite();
        instance.clearProtoVersion();
        return this;
      }

      /**
       * <pre>
       * the height of this block
       * </pre>
       *
       * <code>optional uint64 height = 2;</code>
       */
      public long getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       * the height of this block
       * </pre>
       *
       * <code>optional uint64 height = 2;</code>
       */
      public Builder setHeight(long value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       * the height of this block
       * </pre>
       *
       * <code>optional uint64 height = 2;</code>
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      /**
       * <code>optional bytes hash = 3;</code>
       */
      public com.google.protobuf.ByteString getHash() {
        return instance.getHash();
      }
      /**
       * <code>optional bytes hash = 3;</code>
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHash(value);
        return this;
      }
      /**
       * <code>optional bytes hash = 3;</code>
       */
      public Builder clearHash() {
        copyOnWrite();
        instance.clearHash();
        return this;
      }

      /**
       * <code>optional uint32 time = 4;</code>
       */
      public int getTime() {
        return instance.getTime();
      }
      /**
       * <code>optional uint32 time = 4;</code>
       */
      public Builder setTime(int value) {
        copyOnWrite();
        instance.setTime(value);
        return this;
      }
      /**
       * <code>optional uint32 time = 4;</code>
       */
      public Builder clearTime() {
        copyOnWrite();
        instance.clearTime();
        return this;
      }

      /**
       * <pre>
       * (hash and time) OR (full header)
       * </pre>
       *
       * <code>optional bytes header = 5;</code>
       */
      public com.google.protobuf.ByteString getHeader() {
        return instance.getHeader();
      }
      /**
       * <pre>
       * (hash and time) OR (full header)
       * </pre>
       *
       * <code>optional bytes header = 5;</code>
       */
      public Builder setHeader(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHeader(value);
        return this;
      }
      /**
       * <pre>
       * (hash and time) OR (full header)
       * </pre>
       *
       * <code>optional bytes header = 5;</code>
       */
      public Builder clearHeader() {
        copyOnWrite();
        instance.clearHeader();
        return this;
      }

      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public java.util.List<rpc.CompactFormats.CompactTx> getVtxList() {
        return java.util.Collections.unmodifiableList(
            instance.getVtxList());
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public int getVtxCount() {
        return instance.getVtxCount();
      }/**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public rpc.CompactFormats.CompactTx getVtx(int index) {
        return instance.getVtx(index);
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder setVtx(
          int index, rpc.CompactFormats.CompactTx value) {
        copyOnWrite();
        instance.setVtx(index, value);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder setVtx(
          int index, rpc.CompactFormats.CompactTx.Builder builderForValue) {
        copyOnWrite();
        instance.setVtx(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder addVtx(rpc.CompactFormats.CompactTx value) {
        copyOnWrite();
        instance.addVtx(value);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder addVtx(
          int index, rpc.CompactFormats.CompactTx value) {
        copyOnWrite();
        instance.addVtx(index, value);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder addVtx(
          rpc.CompactFormats.CompactTx.Builder builderForValue) {
        copyOnWrite();
        instance.addVtx(builderForValue);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder addVtx(
          int index, rpc.CompactFormats.CompactTx.Builder builderForValue) {
        copyOnWrite();
        instance.addVtx(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder addAllVtx(
          java.lang.Iterable<? extends rpc.CompactFormats.CompactTx> values) {
        copyOnWrite();
        instance.addAllVtx(values);
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder clearVtx() {
        copyOnWrite();
        instance.clearVtx();
        return this;
      }
      /**
       * <pre>
       * compact transactions from this block
       * </pre>
       *
       * <code>repeated .rpc.CompactTx vtx = 6;</code>
       */
      public Builder removeVtx(int index) {
        copyOnWrite();
        instance.removeVtx(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:rpc.CompactBlock)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new rpc.CompactFormats.CompactBlock();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          vtx_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          rpc.CompactFormats.CompactBlock other = (rpc.CompactFormats.CompactBlock) arg1;
          protoVersion_ = visitor.visitInt(protoVersion_ != 0, protoVersion_,
              other.protoVersion_ != 0, other.protoVersion_);
          height_ = visitor.visitLong(height_ != 0L, height_,
              other.height_ != 0L, other.height_);
          hash_ = visitor.visitByteString(hash_ != com.google.protobuf.ByteString.EMPTY, hash_,
              other.hash_ != com.google.protobuf.ByteString.EMPTY, other.hash_);
          time_ = visitor.visitInt(time_ != 0, time_,
              other.time_ != 0, other.time_);
          header_ = visitor.visitByteString(header_ != com.google.protobuf.ByteString.EMPTY, header_,
              other.header_ != com.google.protobuf.ByteString.EMPTY, other.header_);
          vtx_= visitor.visitList(vtx_, other.vtx_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  protoVersion_ = input.readUInt32();
                  break;
                }
                case 16: {

                  height_ = input.readUInt64();
                  break;
                }
                case 26: {

                  hash_ = input.readBytes();
                  break;
                }
                case 32: {

                  time_ = input.readUInt32();
                  break;
                }
                case 42: {

                  header_ = input.readBytes();
                  break;
                }
                case 50: {
                  if (!vtx_.isModifiable()) {
                    vtx_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(vtx_);
                  }
                  vtx_.add(
                      input.readMessage(rpc.CompactFormats.CompactTx.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (rpc.CompactFormats.CompactBlock.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:rpc.CompactBlock)
    private static final rpc.CompactFormats.CompactBlock DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CompactBlock();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static rpc.CompactFormats.CompactBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactBlock> PARSER;

    public static com.google.protobuf.Parser<CompactBlock> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactTxOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rpc.CompactTx)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>optional uint64 index = 1;</code>
     */
    long getIndex();

    /**
     * <code>optional bytes hash = 2;</code>
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * in a pure-Sapling context, the fee will be calculable as:
     *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
     * </pre>
     *
     * <code>optional uint32 fee = 3;</code>
     */
    int getFee();

    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    java.util.List<rpc.CompactFormats.CompactSpend> 
        getSpendsList();
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    rpc.CompactFormats.CompactSpend getSpends(int index);
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    int getSpendsCount();

    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    java.util.List<rpc.CompactFormats.CompactOutput> 
        getOutputsList();
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    rpc.CompactFormats.CompactOutput getOutputs(int index);
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    int getOutputsCount();
  }
  /**
   * Protobuf type {@code rpc.CompactTx}
   */
  public  static final class CompactTx extends
      com.google.protobuf.GeneratedMessageLite<
          CompactTx, CompactTx.Builder> implements
      // @@protoc_insertion_point(message_implements:rpc.CompactTx)
      CompactTxOrBuilder {
    private CompactTx() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
      spends_ = emptyProtobufList();
      outputs_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private long index_;
    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>optional uint64 index = 1;</code>
     */
    public long getIndex() {
      return index_;
    }
    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>optional uint64 index = 1;</code>
     */
    private void setIndex(long value) {
      
      index_ = value;
    }
    /**
     * <pre>
     * Index and hash will allow the receiver to call out to chain
     * explorers or other data structures to retrieve more information
     * about this transaction.
     * </pre>
     *
     * <code>optional uint64 index = 1;</code>
     */
    private void clearIndex() {
      
      index_ = 0L;
    }

    public static final int HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString hash_;
    /**
     * <code>optional bytes hash = 2;</code>
     */
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }
    /**
     * <code>optional bytes hash = 2;</code>
     */
    private void setHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hash_ = value;
    }
    /**
     * <code>optional bytes hash = 2;</code>
     */
    private void clearHash() {
      
      hash_ = getDefaultInstance().getHash();
    }

    public static final int FEE_FIELD_NUMBER = 3;
    private int fee_;
    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * in a pure-Sapling context, the fee will be calculable as:
     *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
     * </pre>
     *
     * <code>optional uint32 fee = 3;</code>
     */
    public int getFee() {
      return fee_;
    }
    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * in a pure-Sapling context, the fee will be calculable as:
     *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
     * </pre>
     *
     * <code>optional uint32 fee = 3;</code>
     */
    private void setFee(int value) {
      
      fee_ = value;
    }
    /**
     * <pre>
     * The transaction fee: present if server can provide. In the case of a
     * stateless server and a transaction with transparent inputs, this will be
     * unset because the calculation requires reference to prior transactions.
     * in a pure-Sapling context, the fee will be calculable as:
     *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
     * </pre>
     *
     * <code>optional uint32 fee = 3;</code>
     */
    private void clearFee() {
      
      fee_ = 0;
    }

    public static final int SPENDS_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<rpc.CompactFormats.CompactSpend> spends_;
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    public java.util.List<rpc.CompactFormats.CompactSpend> getSpendsList() {
      return spends_;
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    public java.util.List<? extends rpc.CompactFormats.CompactSpendOrBuilder> 
        getSpendsOrBuilderList() {
      return spends_;
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    public int getSpendsCount() {
      return spends_.size();
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    public rpc.CompactFormats.CompactSpend getSpends(int index) {
      return spends_.get(index);
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    public rpc.CompactFormats.CompactSpendOrBuilder getSpendsOrBuilder(
        int index) {
      return spends_.get(index);
    }
    private void ensureSpendsIsMutable() {
      if (!spends_.isModifiable()) {
        spends_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(spends_);
       }
    }

    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void setSpends(
        int index, rpc.CompactFormats.CompactSpend value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSpendsIsMutable();
      spends_.set(index, value);
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void setSpends(
        int index, rpc.CompactFormats.CompactSpend.Builder builderForValue) {
      ensureSpendsIsMutable();
      spends_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void addSpends(rpc.CompactFormats.CompactSpend value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSpendsIsMutable();
      spends_.add(value);
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void addSpends(
        int index, rpc.CompactFormats.CompactSpend value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSpendsIsMutable();
      spends_.add(index, value);
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void addSpends(
        rpc.CompactFormats.CompactSpend.Builder builderForValue) {
      ensureSpendsIsMutable();
      spends_.add(builderForValue.build());
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void addSpends(
        int index, rpc.CompactFormats.CompactSpend.Builder builderForValue) {
      ensureSpendsIsMutable();
      spends_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void addAllSpends(
        java.lang.Iterable<? extends rpc.CompactFormats.CompactSpend> values) {
      ensureSpendsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, spends_);
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void clearSpends() {
      spends_ = emptyProtobufList();
    }
    /**
     * <code>repeated .rpc.CompactSpend spends = 4;</code>
     */
    private void removeSpends(int index) {
      ensureSpendsIsMutable();
      spends_.remove(index);
    }

    public static final int OUTPUTS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<rpc.CompactFormats.CompactOutput> outputs_;
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    public java.util.List<rpc.CompactFormats.CompactOutput> getOutputsList() {
      return outputs_;
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    public java.util.List<? extends rpc.CompactFormats.CompactOutputOrBuilder> 
        getOutputsOrBuilderList() {
      return outputs_;
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    public int getOutputsCount() {
      return outputs_.size();
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    public rpc.CompactFormats.CompactOutput getOutputs(int index) {
      return outputs_.get(index);
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    public rpc.CompactFormats.CompactOutputOrBuilder getOutputsOrBuilder(
        int index) {
      return outputs_.get(index);
    }
    private void ensureOutputsIsMutable() {
      if (!outputs_.isModifiable()) {
        outputs_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(outputs_);
       }
    }

    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void setOutputs(
        int index, rpc.CompactFormats.CompactOutput value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOutputsIsMutable();
      outputs_.set(index, value);
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void setOutputs(
        int index, rpc.CompactFormats.CompactOutput.Builder builderForValue) {
      ensureOutputsIsMutable();
      outputs_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void addOutputs(rpc.CompactFormats.CompactOutput value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOutputsIsMutable();
      outputs_.add(value);
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void addOutputs(
        int index, rpc.CompactFormats.CompactOutput value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOutputsIsMutable();
      outputs_.add(index, value);
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void addOutputs(
        rpc.CompactFormats.CompactOutput.Builder builderForValue) {
      ensureOutputsIsMutable();
      outputs_.add(builderForValue.build());
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void addOutputs(
        int index, rpc.CompactFormats.CompactOutput.Builder builderForValue) {
      ensureOutputsIsMutable();
      outputs_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void addAllOutputs(
        java.lang.Iterable<? extends rpc.CompactFormats.CompactOutput> values) {
      ensureOutputsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, outputs_);
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void clearOutputs() {
      outputs_ = emptyProtobufList();
    }
    /**
     * <code>repeated .rpc.CompactOutput outputs = 5;</code>
     */
    private void removeOutputs(int index) {
      ensureOutputsIsMutable();
      outputs_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (index_ != 0L) {
        output.writeUInt64(1, index_);
      }
      if (!hash_.isEmpty()) {
        output.writeBytes(2, hash_);
      }
      if (fee_ != 0) {
        output.writeUInt32(3, fee_);
      }
      for (int i = 0; i < spends_.size(); i++) {
        output.writeMessage(4, spends_.get(i));
      }
      for (int i = 0; i < outputs_.size(); i++) {
        output.writeMessage(5, outputs_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (index_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, index_);
      }
      if (!hash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, hash_);
      }
      if (fee_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, fee_);
      }
      for (int i = 0; i < spends_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, spends_.get(i));
      }
      for (int i = 0; i < outputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outputs_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactTx parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactTx parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactTx parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rpc.CompactFormats.CompactTx prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code rpc.CompactTx}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          rpc.CompactFormats.CompactTx, Builder> implements
        // @@protoc_insertion_point(builder_implements:rpc.CompactTx)
        rpc.CompactFormats.CompactTxOrBuilder {
      // Construct using rpc.CompactFormats.CompactTx.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Index and hash will allow the receiver to call out to chain
       * explorers or other data structures to retrieve more information
       * about this transaction.
       * </pre>
       *
       * <code>optional uint64 index = 1;</code>
       */
      public long getIndex() {
        return instance.getIndex();
      }
      /**
       * <pre>
       * Index and hash will allow the receiver to call out to chain
       * explorers or other data structures to retrieve more information
       * about this transaction.
       * </pre>
       *
       * <code>optional uint64 index = 1;</code>
       */
      public Builder setIndex(long value) {
        copyOnWrite();
        instance.setIndex(value);
        return this;
      }
      /**
       * <pre>
       * Index and hash will allow the receiver to call out to chain
       * explorers or other data structures to retrieve more information
       * about this transaction.
       * </pre>
       *
       * <code>optional uint64 index = 1;</code>
       */
      public Builder clearIndex() {
        copyOnWrite();
        instance.clearIndex();
        return this;
      }

      /**
       * <code>optional bytes hash = 2;</code>
       */
      public com.google.protobuf.ByteString getHash() {
        return instance.getHash();
      }
      /**
       * <code>optional bytes hash = 2;</code>
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHash(value);
        return this;
      }
      /**
       * <code>optional bytes hash = 2;</code>
       */
      public Builder clearHash() {
        copyOnWrite();
        instance.clearHash();
        return this;
      }

      /**
       * <pre>
       * The transaction fee: present if server can provide. In the case of a
       * stateless server and a transaction with transparent inputs, this will be
       * unset because the calculation requires reference to prior transactions.
       * in a pure-Sapling context, the fee will be calculable as:
       *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
       * </pre>
       *
       * <code>optional uint32 fee = 3;</code>
       */
      public int getFee() {
        return instance.getFee();
      }
      /**
       * <pre>
       * The transaction fee: present if server can provide. In the case of a
       * stateless server and a transaction with transparent inputs, this will be
       * unset because the calculation requires reference to prior transactions.
       * in a pure-Sapling context, the fee will be calculable as:
       *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
       * </pre>
       *
       * <code>optional uint32 fee = 3;</code>
       */
      public Builder setFee(int value) {
        copyOnWrite();
        instance.setFee(value);
        return this;
      }
      /**
       * <pre>
       * The transaction fee: present if server can provide. In the case of a
       * stateless server and a transaction with transparent inputs, this will be
       * unset because the calculation requires reference to prior transactions.
       * in a pure-Sapling context, the fee will be calculable as:
       *    valueBalance + (sum(vPubNew) - sum(vPubOld) - sum(tOut))
       * </pre>
       *
       * <code>optional uint32 fee = 3;</code>
       */
      public Builder clearFee() {
        copyOnWrite();
        instance.clearFee();
        return this;
      }

      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public java.util.List<rpc.CompactFormats.CompactSpend> getSpendsList() {
        return java.util.Collections.unmodifiableList(
            instance.getSpendsList());
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public int getSpendsCount() {
        return instance.getSpendsCount();
      }/**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public rpc.CompactFormats.CompactSpend getSpends(int index) {
        return instance.getSpends(index);
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder setSpends(
          int index, rpc.CompactFormats.CompactSpend value) {
        copyOnWrite();
        instance.setSpends(index, value);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder setSpends(
          int index, rpc.CompactFormats.CompactSpend.Builder builderForValue) {
        copyOnWrite();
        instance.setSpends(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder addSpends(rpc.CompactFormats.CompactSpend value) {
        copyOnWrite();
        instance.addSpends(value);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder addSpends(
          int index, rpc.CompactFormats.CompactSpend value) {
        copyOnWrite();
        instance.addSpends(index, value);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder addSpends(
          rpc.CompactFormats.CompactSpend.Builder builderForValue) {
        copyOnWrite();
        instance.addSpends(builderForValue);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder addSpends(
          int index, rpc.CompactFormats.CompactSpend.Builder builderForValue) {
        copyOnWrite();
        instance.addSpends(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder addAllSpends(
          java.lang.Iterable<? extends rpc.CompactFormats.CompactSpend> values) {
        copyOnWrite();
        instance.addAllSpends(values);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder clearSpends() {
        copyOnWrite();
        instance.clearSpends();
        return this;
      }
      /**
       * <code>repeated .rpc.CompactSpend spends = 4;</code>
       */
      public Builder removeSpends(int index) {
        copyOnWrite();
        instance.removeSpends(index);
        return this;
      }

      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public java.util.List<rpc.CompactFormats.CompactOutput> getOutputsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOutputsList());
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public int getOutputsCount() {
        return instance.getOutputsCount();
      }/**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public rpc.CompactFormats.CompactOutput getOutputs(int index) {
        return instance.getOutputs(index);
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder setOutputs(
          int index, rpc.CompactFormats.CompactOutput value) {
        copyOnWrite();
        instance.setOutputs(index, value);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder setOutputs(
          int index, rpc.CompactFormats.CompactOutput.Builder builderForValue) {
        copyOnWrite();
        instance.setOutputs(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder addOutputs(rpc.CompactFormats.CompactOutput value) {
        copyOnWrite();
        instance.addOutputs(value);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder addOutputs(
          int index, rpc.CompactFormats.CompactOutput value) {
        copyOnWrite();
        instance.addOutputs(index, value);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder addOutputs(
          rpc.CompactFormats.CompactOutput.Builder builderForValue) {
        copyOnWrite();
        instance.addOutputs(builderForValue);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder addOutputs(
          int index, rpc.CompactFormats.CompactOutput.Builder builderForValue) {
        copyOnWrite();
        instance.addOutputs(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder addAllOutputs(
          java.lang.Iterable<? extends rpc.CompactFormats.CompactOutput> values) {
        copyOnWrite();
        instance.addAllOutputs(values);
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder clearOutputs() {
        copyOnWrite();
        instance.clearOutputs();
        return this;
      }
      /**
       * <code>repeated .rpc.CompactOutput outputs = 5;</code>
       */
      public Builder removeOutputs(int index) {
        copyOnWrite();
        instance.removeOutputs(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:rpc.CompactTx)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new rpc.CompactFormats.CompactTx();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          spends_.makeImmutable();
          outputs_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          rpc.CompactFormats.CompactTx other = (rpc.CompactFormats.CompactTx) arg1;
          index_ = visitor.visitLong(index_ != 0L, index_,
              other.index_ != 0L, other.index_);
          hash_ = visitor.visitByteString(hash_ != com.google.protobuf.ByteString.EMPTY, hash_,
              other.hash_ != com.google.protobuf.ByteString.EMPTY, other.hash_);
          fee_ = visitor.visitInt(fee_ != 0, fee_,
              other.fee_ != 0, other.fee_);
          spends_= visitor.visitList(spends_, other.spends_);
          outputs_= visitor.visitList(outputs_, other.outputs_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  index_ = input.readUInt64();
                  break;
                }
                case 18: {

                  hash_ = input.readBytes();
                  break;
                }
                case 24: {

                  fee_ = input.readUInt32();
                  break;
                }
                case 34: {
                  if (!spends_.isModifiable()) {
                    spends_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(spends_);
                  }
                  spends_.add(
                      input.readMessage(rpc.CompactFormats.CompactSpend.parser(), extensionRegistry));
                  break;
                }
                case 42: {
                  if (!outputs_.isModifiable()) {
                    outputs_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(outputs_);
                  }
                  outputs_.add(
                      input.readMessage(rpc.CompactFormats.CompactOutput.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (rpc.CompactFormats.CompactTx.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:rpc.CompactTx)
    private static final rpc.CompactFormats.CompactTx DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CompactTx();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static rpc.CompactFormats.CompactTx getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactTx> PARSER;

    public static com.google.protobuf.Parser<CompactTx> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactSpendOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rpc.CompactSpend)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bytes nf = 1;</code>
     */
    com.google.protobuf.ByteString getNf();
  }
  /**
   * Protobuf type {@code rpc.CompactSpend}
   */
  public  static final class CompactSpend extends
      com.google.protobuf.GeneratedMessageLite<
          CompactSpend, CompactSpend.Builder> implements
      // @@protoc_insertion_point(message_implements:rpc.CompactSpend)
      CompactSpendOrBuilder {
    private CompactSpend() {
      nf_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int NF_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString nf_;
    /**
     * <code>optional bytes nf = 1;</code>
     */
    public com.google.protobuf.ByteString getNf() {
      return nf_;
    }
    /**
     * <code>optional bytes nf = 1;</code>
     */
    private void setNf(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nf_ = value;
    }
    /**
     * <code>optional bytes nf = 1;</code>
     */
    private void clearNf() {
      
      nf_ = getDefaultInstance().getNf();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!nf_.isEmpty()) {
        output.writeBytes(1, nf_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!nf_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, nf_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static rpc.CompactFormats.CompactSpend parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactSpend parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactSpend parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactSpend parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rpc.CompactFormats.CompactSpend prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code rpc.CompactSpend}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          rpc.CompactFormats.CompactSpend, Builder> implements
        // @@protoc_insertion_point(builder_implements:rpc.CompactSpend)
        rpc.CompactFormats.CompactSpendOrBuilder {
      // Construct using rpc.CompactFormats.CompactSpend.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes nf = 1;</code>
       */
      public com.google.protobuf.ByteString getNf() {
        return instance.getNf();
      }
      /**
       * <code>optional bytes nf = 1;</code>
       */
      public Builder setNf(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNf(value);
        return this;
      }
      /**
       * <code>optional bytes nf = 1;</code>
       */
      public Builder clearNf() {
        copyOnWrite();
        instance.clearNf();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:rpc.CompactSpend)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new rpc.CompactFormats.CompactSpend();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          rpc.CompactFormats.CompactSpend other = (rpc.CompactFormats.CompactSpend) arg1;
          nf_ = visitor.visitByteString(nf_ != com.google.protobuf.ByteString.EMPTY, nf_,
              other.nf_ != com.google.protobuf.ByteString.EMPTY, other.nf_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  nf_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (rpc.CompactFormats.CompactSpend.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:rpc.CompactSpend)
    private static final rpc.CompactFormats.CompactSpend DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CompactSpend();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static rpc.CompactFormats.CompactSpend getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactSpend> PARSER;

    public static com.google.protobuf.Parser<CompactSpend> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompactOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rpc.CompactOutput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bytes cmu = 1;</code>
     */
    com.google.protobuf.ByteString getCmu();

    /**
     * <code>optional bytes epk = 2;</code>
     */
    com.google.protobuf.ByteString getEpk();

    /**
     * <code>optional bytes ciphertext = 3;</code>
     */
    com.google.protobuf.ByteString getCiphertext();
  }
  /**
   * Protobuf type {@code rpc.CompactOutput}
   */
  public  static final class CompactOutput extends
      com.google.protobuf.GeneratedMessageLite<
          CompactOutput, CompactOutput.Builder> implements
      // @@protoc_insertion_point(message_implements:rpc.CompactOutput)
      CompactOutputOrBuilder {
    private CompactOutput() {
      cmu_ = com.google.protobuf.ByteString.EMPTY;
      epk_ = com.google.protobuf.ByteString.EMPTY;
      ciphertext_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int CMU_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString cmu_;
    /**
     * <code>optional bytes cmu = 1;</code>
     */
    public com.google.protobuf.ByteString getCmu() {
      return cmu_;
    }
    /**
     * <code>optional bytes cmu = 1;</code>
     */
    private void setCmu(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      cmu_ = value;
    }
    /**
     * <code>optional bytes cmu = 1;</code>
     */
    private void clearCmu() {
      
      cmu_ = getDefaultInstance().getCmu();
    }

    public static final int EPK_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString epk_;
    /**
     * <code>optional bytes epk = 2;</code>
     */
    public com.google.protobuf.ByteString getEpk() {
      return epk_;
    }
    /**
     * <code>optional bytes epk = 2;</code>
     */
    private void setEpk(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      epk_ = value;
    }
    /**
     * <code>optional bytes epk = 2;</code>
     */
    private void clearEpk() {
      
      epk_ = getDefaultInstance().getEpk();
    }

    public static final int CIPHERTEXT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString ciphertext_;
    /**
     * <code>optional bytes ciphertext = 3;</code>
     */
    public com.google.protobuf.ByteString getCiphertext() {
      return ciphertext_;
    }
    /**
     * <code>optional bytes ciphertext = 3;</code>
     */
    private void setCiphertext(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ciphertext_ = value;
    }
    /**
     * <code>optional bytes ciphertext = 3;</code>
     */
    private void clearCiphertext() {
      
      ciphertext_ = getDefaultInstance().getCiphertext();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!cmu_.isEmpty()) {
        output.writeBytes(1, cmu_);
      }
      if (!epk_.isEmpty()) {
        output.writeBytes(2, epk_);
      }
      if (!ciphertext_.isEmpty()) {
        output.writeBytes(3, ciphertext_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!cmu_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, cmu_);
      }
      if (!epk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, epk_);
      }
      if (!ciphertext_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, ciphertext_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static rpc.CompactFormats.CompactOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static rpc.CompactFormats.CompactOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rpc.CompactFormats.CompactOutput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code rpc.CompactOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          rpc.CompactFormats.CompactOutput, Builder> implements
        // @@protoc_insertion_point(builder_implements:rpc.CompactOutput)
        rpc.CompactFormats.CompactOutputOrBuilder {
      // Construct using rpc.CompactFormats.CompactOutput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes cmu = 1;</code>
       */
      public com.google.protobuf.ByteString getCmu() {
        return instance.getCmu();
      }
      /**
       * <code>optional bytes cmu = 1;</code>
       */
      public Builder setCmu(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCmu(value);
        return this;
      }
      /**
       * <code>optional bytes cmu = 1;</code>
       */
      public Builder clearCmu() {
        copyOnWrite();
        instance.clearCmu();
        return this;
      }

      /**
       * <code>optional bytes epk = 2;</code>
       */
      public com.google.protobuf.ByteString getEpk() {
        return instance.getEpk();
      }
      /**
       * <code>optional bytes epk = 2;</code>
       */
      public Builder setEpk(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setEpk(value);
        return this;
      }
      /**
       * <code>optional bytes epk = 2;</code>
       */
      public Builder clearEpk() {
        copyOnWrite();
        instance.clearEpk();
        return this;
      }

      /**
       * <code>optional bytes ciphertext = 3;</code>
       */
      public com.google.protobuf.ByteString getCiphertext() {
        return instance.getCiphertext();
      }
      /**
       * <code>optional bytes ciphertext = 3;</code>
       */
      public Builder setCiphertext(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCiphertext(value);
        return this;
      }
      /**
       * <code>optional bytes ciphertext = 3;</code>
       */
      public Builder clearCiphertext() {
        copyOnWrite();
        instance.clearCiphertext();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:rpc.CompactOutput)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new rpc.CompactFormats.CompactOutput();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          rpc.CompactFormats.CompactOutput other = (rpc.CompactFormats.CompactOutput) arg1;
          cmu_ = visitor.visitByteString(cmu_ != com.google.protobuf.ByteString.EMPTY, cmu_,
              other.cmu_ != com.google.protobuf.ByteString.EMPTY, other.cmu_);
          epk_ = visitor.visitByteString(epk_ != com.google.protobuf.ByteString.EMPTY, epk_,
              other.epk_ != com.google.protobuf.ByteString.EMPTY, other.epk_);
          ciphertext_ = visitor.visitByteString(ciphertext_ != com.google.protobuf.ByteString.EMPTY, ciphertext_,
              other.ciphertext_ != com.google.protobuf.ByteString.EMPTY, other.ciphertext_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  cmu_ = input.readBytes();
                  break;
                }
                case 18: {

                  epk_ = input.readBytes();
                  break;
                }
                case 26: {

                  ciphertext_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (rpc.CompactFormats.CompactOutput.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:rpc.CompactOutput)
    private static final rpc.CompactFormats.CompactOutput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CompactOutput();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static rpc.CompactFormats.CompactOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CompactOutput> PARSER;

    public static com.google.protobuf.Parser<CompactOutput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
